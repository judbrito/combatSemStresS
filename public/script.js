document.addEventListener('DOMContentLoaded', () => {
    const API_URL = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://semstressorteio.onrender.com';
    let emotions = generateRandomEmotions();
    let adminToken = localStorage.getItem('adminToken');
    let selectedEmotions = [];
    let currentNick = '';
    let currentAudio = null;
    let isMobile = /Mobi|Android/i.test(navigator.userAgent);
    let semStressPlayers = [];

    const frasesSemStress = [
        "Pleno(a) como um buraco negro, nem a luz te tira a paz.", "Seu n√≠vel de stress √© t√£o baixo que est√° em outra dimens√£o.", "Voc√™ flutua em √≥rbita de tranquilidade.", "O universo pode colapsar, mas voc√™ continuar√° sereno(a).", "Voc√™ √© a estrela cadente que ignora o atrito atmosf√©rico.", "Meteoro de paci√™ncia, nada te abala.", "Sua paz √© uma aurora boreal: bela e inabal√°vel.", "Voc√™ √© a defini√ß√£o de uma gal√°xia zen.", "Voc√™ medita na velocidade da luz.", "Para voc√™, caos √© apenas uma constela√ß√£o diferente.", "Seu cora√ß√£o √© um pulsar de calma e serenidade.", "O tempo para voc√™ n√£o passa, ele orbita.", "A gravidade da vida n√£o te afeta.", "Sua tranquilidade √© t√£o imensa quanto o vazio do espa√ßo.", "Voc√™ n√£o tem stress, s√≥ tem a gravidade do seu pr√≥prio bem-estar.", "Voc√™ √© o paradoxo da paz universal.", "Sua mente √© um v√°cuo, no bom sentido.", "Seu n√≠vel de stress √© um zero absoluto c√≥smico.", "Voc√™ flutua, enquanto os outros caem.", "Sua serenidade √© uma super-nova, brilha sem esfor√ßo.", "Voc√™ √© a tranquilidade em pessoa, s√≥ que em outro planeta.", "Calmo como a escurid√£o do espa√ßo, nada te assusta.", "Seu stress est√° em outro universo, literalmente.", "Voc√™ n√£o vive, voc√™ orbita, com uma calma impressionante.", "Sua calma √© a for√ßa mais poderosa do universo.", "Seu cora√ß√£o √© um pulsar de calma, e o seu sorriso um eclipse.", "Voc√™ √© a prova de que a vida pode ser um passeio no parque.", "Nenhum problema √© grande o suficiente para te tirar a paz.", "Sua mente √© um universo de calma e serenidade.", "Voc√™ √© a personifica√ß√£o da palavra 'zen'.", "Voc√™ √© um raio de sol em um universo de escurid√£o.", "Sua tranquilidade √© uma for√ßa da natureza.", "Sua paz √© um tesouro c√≥smico.", "Voc√™ √© um farol de calma em um mar de caos.", "Sua mente √© como um lago sereno, sem uma √∫nica onda.", "Sua tranquilidade √© uma arma secreta.", "Sua paz √© um presente para o universo.", "Sua mente √© um para√≠so de calma.", "Voc√™ √© um o√°sis de tranquilidade no deserto da vida.", "Sua calma √© a sua maior virtude.", "Sua mente √© um jardim de paz.", "Sua tranquilidade √© contagiante.", "Sua paz √© uma joia rara.", "Voc√™ √© um mestre da calma.", "Sua mente √© um ref√∫gio de paz.", "Sua tranquilidade √© inestim√°vel.", "Sua paz √© uma b√™n√ß√£o para o universo.", "Sua mente √© um santu√°rio de calma.", "Sua tranquilidade √© a sua for√ßa.", "Sua paz √© um presente para si mesmo."
    ];
    const frasesMeiaBoca = [
        "Voc√™ est√° no meio, nem l√°, nem c√°. Um verdadeiro neutro c√≥smico.", "Sua energia √© um v√°cuo: nem quente, nem frio. Apenas... existindo.", "Voc√™ est√° no meio do ranking. √â o equil√≠brio do universo, ou s√≥ a m√©dia.", "Voc√™ n√£o √© o vil√£o, mas tamb√©m n√£o √© o her√≥i. √â o NPC gal√°ctico.", "Seu stress est√° em ponto morto, pronto para acelerar ou parar de vez.", "Voc√™ √© o meteoro que ainda n√£o sabe se vai brilhar ou queimar.", "Voc√™ n√£o est√° nem com o 'SemStress' nem com o 'TemStress'. Voc√™ est√° no limbo.", "Voc√™ √© a gravidade que se recusa a puxar para baixo ou para cima.", "Voc√™ √© o meio termo, a ponte entre o caos e a paz. Um verdadeiro her√≥i indeciso.", "Voc√™ √© um viajante intergal√°ctico sem um destino definido.", "Voc√™ √© um planeta em √≥rbita que ainda n√£o encontrou seu sol.", "Voc√™ √© uma constela√ß√£o que ainda n√£o se formou.", "Voc√™ √© um paradoxo c√≥smico, a paz e o caos em um s√≥ lugar.", "Voc√™ √© um cometa que ainda n√£o sabe se vai brilhar ou sumir.", "Voc√™ √© um buraco negro que ainda n√£o sabe se vai sugar ou explodir.", "Voc√™ √© um eclipse que ainda n√£o sabe se vai escurecer ou iluminar.", "Voc√™ √© uma super-nova que ainda n√£o sabe se vai explodir ou implodir.", "Voc√™ √© uma gal√°xia que ainda n√£o sabe se vai se expandir ou contrair.", "Voc√™ √© um pulsar de calma e caos.", "Voc√™ √© a defini√ß√£o de um 'meio termo' c√≥smico.", "Voc√™ √© um viajante do tempo que ainda n√£o sabe se vai para o passado ou para o futuro.", "Voc√™ √© um raio de sol em um dia nublado.", "Voc√™ √© um o√°sis no deserto, mas ainda n√£o √© um para√≠so.", "Voc√™ √© uma joia rara, mas ainda n√£o √© um tesouro.", "Voc√™ √© um mestre da indecis√£o.", "Voc√™ √© um ref√∫gio de paz, mas ainda n√£o √© um santu√°rio.", "Voc√™ √© uma b√™n√ß√£o, mas ainda n√£o √© um milagre.", "Voc√™ √© um jardim de paz, mas ainda n√£o √© um para√≠so.", "Voc√™ √© um farol de calma, mas ainda n√£o √© um farol de luz.", "Voc√™ √© um o√°sis de tranquilidade, mas ainda n√£o √© um o√°sis de paz.", "Voc√™ √© um mestre da calma, mas ainda n√£o √© um mestre da serenidade.", "Voc√™ √© um ref√∫gio de paz, mas ainda n√£o √© um ref√∫gio de calma.", "Voc√™ √© uma b√™n√ß√£o, mas ainda n√£o √© um presente.", "Voc√™ √© um jardim de paz, mas ainda n√£o √© um ref√∫gio de paz.", "Voc√™ √© um farol de calma, mas ainda n√£o √© um farol de tranquilidade.", "Voc√™ √© um o√°sis de tranquilidade, mas ainda n√£o √© um o√°sis de serenidade.", "Voc√™ √© um mestre da calma, mas ainda n√£o √© um mestre da paz.", "Voc√™ √© um ref√∫gio de paz, mas ainda n√£o √© um ref√∫gio de serenidade.", "Voc√™ √© uma b√™n√ß√£o, mas ainda n√£o √© um presente do universo.", "Voc√™ √© um jardim de paz, mas ainda n√£o √© um jardim de tranquilidade.", "Voc√™ √© um farol de calma, mas ainda n√£o √© um farol de paz.", "Voc√™ √© um o√°sis de tranquilidade, mas ainda n√£o √© um o√°sis de paz.", "Voc√™ √© um mestre da calma, mas ainda n√£o √© um mestre da serenidade."
    ];
    const frasesTemStress = [
        "Sua alma est√° em colapso como uma estrela moribunda.", "Voc√™ √© a supernova do stress. Brilha e explode de t√£o nervoso(a).", "Seu n√≠vel de stress √© t√£o alto que est√° atraindo buracos negros.", "Sua paci√™ncia foi devorada por um buraco negro.", "Voc√™ √© o caos em pessoa, uma supernova em colapso.", "Seu cora√ß√£o pulsa como um pulsar de pura ansiedade.", "Seu stress √© uma erup√ß√£o solar prestes a acontecer.", "Voc√™ √© a personifica√ß√£o do stress c√≥smico.", "Sua mente √© um buraco negro de preocupa√ß√µes.", "Voc√™ √© o desespero de um redemoinho gal√°ctico.", "Sua paci√™ncia est√° em outro universo, e n√£o volta mais.", "Seu cora√ß√£o est√° em √≥rbita de ansiedade e pavor.", "Seu stress √© a gravidade que te puxa para baixo.", "Voc√™ √© o paradoxo do caos universal.", "Sua mente √© um v√°cuo, mas de preocupa√ß√µes.", "Seu n√≠vel de stress √© um zero absoluto c√≥smico.", "Voc√™ n√£o flutua, voc√™ cai, e com stress.", "Seu cora√ß√£o √© um pulsar de caos, e o seu sorriso um eclipse de paz.", "Voc√™ √© a prova de que a vida n√£o pode ser um passeio no parque.", "Qualquer problema √© grande o suficiente para te tirar a paz.", "Sua mente √© um universo de caos e preocupa√ß√µes.", "Voc√™ √© a personifica√ß√£o da palavra 'stress'.", "Voc√™ √© um buraco negro em um universo de luz.", "Seu stress √© uma for√ßa da natureza.", "Seu stress √© um tesouro c√≥smico, para os outros.", "Voc√™ √© um farol de caos em um mar de calma.", "Sua mente √© como um lago agitado, com uma √∫nica onda de paz.", "Seu stress √© uma arma secreta, mas contra voc√™ mesmo.", "Seu stress √© um presente para o universo, para os outros.", "Sua mente √© um para√≠so de caos.", "Voc√™ √© um o√°sis de preocupa√ß√µes no deserto da vida.", "Seu stress √© a sua maior virtude, para os outros.", "Sua mente √© um jardim de preocupa√ß√µes.", "Seu stress √© contagiante.", "Seu stress √© uma joia rara, para os outros.", "Voc√™ √© um mestre do stress.", "Sua mente √© um ref√∫gio de preocupa√ß√µes.", "Seu stress √© inestim√°vel, para os outros.", "Seu stress √© uma b√™n√ß√£o para o universo, para os outros.", "Sua mente √© um santu√°rio de preocupa√ß√µes.", "Seu stress √© a sua for√ßa, mas contra voc√™ mesmo.", "Seu stress √© um presente para si mesmo, para os outros.", "Sua mente √© um universo de caos e preocupa√ß√µes.", "Seu stress √© uma for√ßa da natureza, mas contra voc√™ mesmo.", "Seu stress √© um tesouro c√≥smico, para os outros.", "Voc√™ √© um farol de caos em um mar de paz.", "Sua mente √© como um lago agitado, mas com uma √∫nica onda de caos.", "Seu stress √© uma arma secreta, mas contra voc√™ mesmo.", "Seu stress √© um presente para o universo, para os outros.", "Sua mente √© um para√≠so de caos."
    ];

    function generateRandomEmotions() {
        const icons = ["üåå", "‚ú®", "üå†", "ü™ê", "‚ö´", "üí•", "üåÄ", "‚òÑÔ∏è", "üåâ", "üå†", "‚öõÔ∏è", "üåë", "üîÆ", "‚¨áÔ∏è", "üåç", "‚è≥", "üíì", "üí´", "üî•", "üåÄ"];
        const names = ["Awe C√≥smico", "Maravilha Estelar", "Solid√£o Gal√°ctica", "Curiosidade Nebulosa", "Pavor do Buraco Negro", "Euforia de Supernova", "Serenidade Orbital", "Nostalgia Comet√°ria", "Anseio Interstelar", "Felicidade Celestial", "Confus√£o Qu√¢ntica", "Melancolia da Mat√©ria Escura", "Conex√£o Astral", "Pux√£o Gravitacional", "Pertencimento C√≥smico", "Ansiedade de Horizonte de Eventos", "Paix√£o Pulsar", "Inspira√ß√£o Mete√≥rica", "Emo√ß√£o de Erup√ß√£o Solar", "Desespero de Redemoinho Gal√°ctico"];
        return Array.from({ length: 30 }, () => ({
            icon: icons[Math.floor(Math.random() * icons.length)],
            name: names[Math.floor(Math.random() * names.length)],
            value: Math.round(Math.random() * 20000 - 10000)
        }));
    }

    const fetchAPI = async (endpoint, options = {}) => {
        const response = await fetch(`${API_URL}${endpoint}`, options);

        if (response.status === 403) {
            alert('Sess√£o expirada ou acesso negado. Fa√ßa login novamente.');
            localStorage.removeItem('adminToken');
            showPage('login-section');
            throw new Error('Forbidden');
        }

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText);
        }

        const contentType = response.headers.get("content-type");
        if (contentType && contentType.indexOf("application/json") !== -1) {
            return response.json();
        } else {
            return response.text();
        }
    };

    const showPage = targetId => {
        document.querySelectorAll('.page-section').forEach(section => section.classList.remove('active'));
        document.getElementById(targetId).classList.add('active');
    };

    function createStars() {
        const container = document.getElementById('star-background');
        container.innerHTML = '';
        const colors = ['#ffffff', '#ffdd59', '#ffa502', '#70a1ff', '#7bed9f', '#ff6b81', '#e056fd'];
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;

        for (let i = 0; i < 35; i++) {
            const star = document.createElement('div');
            star.className = 'star';

            const size = Math.random() * 8 + 4;
            star.style.width = `${size}px`;
            star.style.height = `${size}px`;

            // Posi√ß√£o inicial completamente aleat√≥ria
            const startX = Math.random() * viewportWidth;
            const startY = Math.random() * viewportHeight;
            // Posi√ß√£o final completamente aleat√≥ria
            const endX = Math.random() * viewportWidth;
            const endY = Math.random() * viewportHeight;

            star.style.boxShadow = `0 0 20px 8px ${colors[Math.floor(Math.random() * colors.length)]}`;
            star.style.left = `${startX}px`;
            star.style.top = `${startY}px`;

            const animationName = `starAnimation${i}`;
            const animationDuration = `${Math.random() * 10 + 5}s`;

            // Cria um keyframe √∫nico para cada estrela com movimento aleat√≥rio
            const keyframes = `
                @keyframes ${animationName} {
                    0% {
                        transform: translate(0, 0) rotate(0deg);
                        opacity: 0;
                    }
                    10% {
                        opacity: 1;
                    }
                    90% {
                        opacity: 1;
                    }
                    100% {
                        transform: translate(${endX - startX}px, ${endY - startY}px) rotate(360deg);
                        opacity: 0;
                    }
                }
            `;

            const style = document.createElement('style');
            style.innerHTML = keyframes;
            document.head.appendChild(style);

            star.style.animation = `${animationName} ${animationDuration} linear infinite`;
            star.style.animationDelay = `${Math.random() * 5}s`;

            container.appendChild(star);
        }
    }

    const renderRanking = async () => {
        const rankingBody = document.getElementById('ranking-table').querySelector('tbody');
        rankingBody.innerHTML = '';
        try {
            const ranking = await fetchAPI('/api/ranking');
            const sortedRanking = [...ranking].sort((a, b) => a.score - b.score);
            const totalPlayers = sortedRanking.length;
            const meiaBocaIndex = totalPlayers > 2 ? Math.floor((totalPlayers - 1) / 2) : -1;

            sortedRanking.forEach((player, index) => {
                let stressStatus = 'Medindo Stress';
                let stressClass = '';
                let funnyPhrase = '';

                if (index === 0) {
                    stressStatus = 'SemStress';
                    stressClass = 'semstress';
                    funnyPhrase = frasesSemStress[Math.floor(Math.random() * frasesSemStress.length)];
                } else if (index === totalPlayers - 1) {
                    stressStatus = 'TemStress';
                    stressClass = 'temstress';
                    funnyPhrase = frasesTemStress[Math.floor(Math.random() * frasesTemStress.length)];
                } else if (index === meiaBocaIndex) {
                    stressStatus = 'MeiaBoca';
                    stressClass = 'meia-boca';
                    funnyPhrase = frasesMeiaBoca[Math.floor(Math.random() * frasesMeiaBoca.length)];
                }

                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${player.nick}</td>
                    <td>${player.score}</td>
                    <td class="${stressClass}">${stressStatus}</td>
                    <td>${funnyPhrase}</td>
                `;
                rankingBody.appendChild(tr);
            });
            createStars();
        } catch (e) {
            console.error('Erro ao buscar ranking:', e);
        }
    };

    const renderParticipants = async () => {
        const list = document.getElementById('participants-list');
        list.innerHTML = '';
        try {
            const participants = await fetchAPI('/api/participants', { headers: { 'Authorization': `Bearer ${adminToken}` } });
            participants.slice(0, 150).forEach(nick => {
                const li = document.createElement('li');
                li.innerHTML = `<span>${nick}</span><button class="remove-btn" data-nick="${nick}"><i class="fas fa-trash"></i></button>`;
                list.appendChild(li);
            });
        } catch (e) {
            console.error('Erro ao buscar participantes:', e);
        }
    };

    const setupGame = (nick) => {
        currentNick = nick;
        selectedEmotions = [];
        emotions = generateRandomEmotions();
        document.getElementById('player-nick').textContent = nick;
        document.getElementById('counter').textContent = 'Faltam selecionar: 10';
        document.getElementById('results').style.display = 'none';
        const container = document.getElementById('emotions-container');
        container.innerHTML = '';

        const shuffled = [...emotions].sort(() => 0.5 - Math.random()).slice(0, 30);
        shuffled.forEach(emotion => {
            const btn = document.createElement('button');
            btn.className = 'emotion-btn';
            btn.innerHTML = `${emotion.icon}<br><small>${emotion.name}</small>`;
            btn.addEventListener('click', () => {
                if (btn.classList.contains('selected')) {
                    selectedEmotions = selectedEmotions.filter(e => e !== emotion);
                    btn.classList.remove('selected');
                } else if (selectedEmotions.length < 10) {
                    selectedEmotions.push(emotion);
                    btn.classList.add('selected');
                }
                const remaining = 10 - selectedEmotions.length;
                document.getElementById('counter').textContent = `Faltam selecionar: ${remaining}`;
                if (selectedEmotions.length === 10) calculateResult();
            });
            container.appendChild(btn);
        });
    };

    const calculateResult = async () => {
        const totalScore = selectedEmotions.reduce((sum, emotion) => sum + emotion.value, 0);
        try {
            await fetchAPI('/api/play', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ nick: currentNick, score: totalScore })
            });
            await renderRanking();
            showPage('medir-section');
        } catch (e) {
            console.error('Erro ao registrar jogada:', e);
            alert('N√£o foi poss√≠vel registrar seu resultado. Verifique o servidor.');
        }
    };

    document.getElementById('start-btn').addEventListener('click', () => {
        const nick = document.getElementById('nickname').value.trim().toUpperCase();
        if (nick && nick.length <= 6) {
            setupGame(nick);
            showPage('game-section');
        } else alert('Por favor, insira um nick v√°lido (m√°ximo 6 caracteres)');
    });

    document.getElementById('login-btn').addEventListener('click', async () => {
        const user = document.getElementById('username').value;
        const pass = document.getElementById('password').value;
        try {
            const data = await fetchAPI('/api/admin-login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ user, pass }) });
            adminToken = data.token;
            localStorage.setItem('adminToken', adminToken);
            document.getElementById('login-section').style.display = 'none';
            document.getElementById('admin-dashboard').style.display = 'block';
            renderParticipants();
        } catch (e) {
            document.getElementById('login-error').textContent = 'Credenciais inv√°lidas';
            document.getElementById('login-error').style.display = 'block';
        }
    });

    document.getElementById('add-participant-btn').addEventListener('click', async () => {
        const nick = document.getElementById('new-participant').value.trim().toUpperCase();
        if (nick) {
            try {
                await fetchAPI('/api/add-participant', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${adminToken}` }, body: JSON.stringify({ nick }) });
                document.getElementById('new-participant').value = '';
                renderParticipants();
                alert('Participante adicionado!');
            } catch (e) {
                console.error(e);
            }
        }
    });

    document.getElementById('reset-ranking-btn').addEventListener('click', async () => {
        if (confirm('Tem certeza que deseja resetar o ranking?')) {
            try {
                const data = await fetchAPI('/api/reset-ranking', {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${adminToken}` }
                });
                alert(data);
                renderRanking();
            } catch (e) {
                console.error('Erro ao resetar ranking:', e);
                alert(`Erro: ${e.message}`);
            }
        }
    });

    document.getElementById('bulk-play-btn').addEventListener('click', async () => {
        const nicks = document.getElementById('bulk-participants').value.split(',').map(n => n.trim().toUpperCase()).filter(n => n);
        if (nicks.length) {
            try {
                await fetchAPI('/api/bulk-play', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${adminToken}` }, body: JSON.stringify({ nicks }) });
                document.getElementById('bulk-participants').value = '';
                renderParticipants();
                alert(`${nicks.length} participantes adicionados/jogados com sucesso!`);
            } catch (e) {
                console.error(e);
            }
        }
    });

    document.getElementById('participants-list').addEventListener('click', async (e) => {
        const removeBtn = e.target.closest('.remove-btn');
        if (removeBtn) {
            const nick = removeBtn.dataset.nick;
            if (confirm(`Tem certeza que deseja remover ${nick}?`)) {
                try {
                    await fetchAPI(`/api/participants/${nick}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${adminToken}` } });
                    renderParticipants();
                    alert(`${nick} removido!`);
                } catch (e) {
                    console.error(e);
                }
            }
        }
    });

    document.getElementById('play-audio-btn').addEventListener('click', () => {
        if (currentAudio) currentAudio.pause();
        currentAudio = new Audio('/audio/mensagem.mp3');
        currentAudio.play().catch(e => console.error('Erro ao reproduzir √°udio:', e));
        document.getElementById('play-audio-btn').style.display = 'none';
        document.getElementById('stop-audio-btn').style.display = 'inline-block';
    });

    document.getElementById('stop-audio-btn').addEventListener('click', () => {
        if (currentAudio) currentAudio.pause();
        currentAudio = null;
        document.getElementById('play-audio-btn').style.display = 'inline-block';
        document.getElementById('stop-audio-btn').style.display = 'none';
    });

    document.querySelectorAll('[data-target]').forEach(button => {
        button.addEventListener('click', (e) => {
            const target = e.target.dataset.target;
            showPage(target);
            if (target === 'medir-section') renderRanking();
            if (target === 'admin-section') {
                if (adminToken) {
                    document.getElementById('login-section').style.display = 'none';
                    document.getElementById('admin-dashboard').style.display = 'block';
                    renderParticipants();
                } else {
                    document.getElementById('login-section').style.display = 'block';
                    document.getElementById('admin-dashboard').style.display = 'none';
                }
            }
        });
    });

    document.getElementById('view-ranking-btn').addEventListener('click', () => {
        showPage('medir-section');
        renderRanking();
    });

    createStars();
    renderRanking();
});